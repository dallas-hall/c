Student Name    :   Dallas Hall
RMIT Student ID :   s3461243
COURSE CODE     :   CPT220 / OLA00
Program Code    :   Bachelor of Information Technology (OLA00 / BP162OUP15)

How to compile and execute the program
---------------------------------------
gcc -ansi -Wall -pedantic bar_list.c board.c game.c helpers.c io.c main.c player.c rules.c scoreboard.c linkedlist.c fileio.c -o backgammon.out

I created a file called compile-flags with the above inside of it, made it
executable and just ran ./compile-flags to generate the binary.out file.

Approaches taken to solving the set problems
---------------------------------------------
1) File Mappings
I did the same thing as in assignment one part 2 and 3. I went through all the
header and source files and mapped them out. This was so I could get an under-
standing of how everything linked together. I put this mapping into a basic
flow diagram.

2) Development Process
I followed the same develop process as last time, which is a) code in CLion
b) run and debug in CLion c) compile with gcc on my local Fedora machine d) push
to RMIT and compile with gcc there. This time my repositories are private so
no one can steal my code again.

3) Research Steps
When trying to solve problems, I used the same steps as the last assignment,
which was:
a) Read through the course's code examples.
b) Read through the code examples from the C How To Program 6e text book.
c) I did some online research.
d) Asked my friend who is a very experienced C programmer.

4) Top Down Design
I also used top down design approach again, as described in the text book
C How To Program 6e. I used this when thinking through seemingly complex
problems, such as the linked list operations and the reading in and tokenising
of the lines in the file.

5) Searching The Filesystem
I used grep -inr 'search-term' * inside of my working directory when looking
for stuff. I also used the same functionality inside of CLion when working with
that.

6) Bug Hunting
Most of my bug hunting and fixing was done with the CLion debugger as well as
a heap of print statements. I did run valgrind and libasan at the end as well.

7) Smashing The Stack
There was a bug in my code that again took me hours to figure out. It was
happening when I was creating the game_result pointer and node pointer. I
wasn't using malloc or strdup to allocate memory on the heap for the name
pointers. I think what was happening was that I was creating a string on the
stack and when I was doing operations on other stack items I was smashing the
stack. After a lot of reading of the course code, text book code, and online
forums I realised what the problem was. After using malloc or strdup I had no
issue.

8) createLinkedList Drama
So something that got me caught up for a while was when I was calling
createLinkedList with the memory address of the game_system->scoreboard. I
just didn't think it through that I was using malloc to create a linked list
and returning it. So I was surprised that my addresses were different. I played
around with different combinations of calling the function and questioned
my sanity / understanding of pointers until I finally realised that there was
a call to malloc in there. So I decided to just assign the pointer from malloc
to a list pointer and then dereference that into game_system->scoreboard. I
then had to free the old pointer otherwise I would have a memory leak when
running valgrind / libasan.

9) Bash's Tilde Expansion
So I ran into this 'problem' in part 2 and 3. I am using CLion to develop in
and thus when I run the program I need to pass in parameters within CLion. It
took me along time to remember that bash performs ~ expansion, making it the
value of $HOME. CLion doesn't do this. So I spent a lot of time trying to
manually convert ~ in $HOME and I ran into smashing the stack again. As I was
trying to solve my stack smash I realised I am doing this for nothing as the
command line will solve all my problems.........................................

10) CLion Path Woes
In addition to the ~ problem, CLion was also causing other path woes. It uses
CMake to I assume compile and link the program and this created some additional
folders within my source code. Those additional folders became the program's
current working directory and before realising that, saving files to the
current working directory wasn't working as expected. This would have been
a non-issue if I was testing in the command line................................

11) Bonus Marks
I tried really hard to free all memory as I went along. My output from valgrind
and libasan was clean when the program went through its normal execution flow. My
attempts at fixing the memory leaks is in the code I submitted. It was a part of
my submission as I actively tried to manage memory as I programmed.

12) git Workflow
In assignment 1 I made the mistake of doing all my development on the master
branch. That lead to wasted time when trying to roll back problems I introduced.
So this assignment I used feature and bugfix branches for my development. This
was great when I explored some paths that were dead ends and I could easily
roll back to a current working state. This assignment taught me a lot about the
git workflow and working with git on the command line.

Comments
--------
I am still bitterly disappointed about someone taking my code and passing it off
as their own. But I accept full responsibility for leaving my repos on public
and thus allowing them the opportunity to do so.

The following is what I said to Paul in a Canvas message at 31 July 2019 at
16:02

"Sorry to bother you again. I just realised that my assignment 2 part 1 code is
potentially compromised and my code up until today for part 2 is also
potentially compromised. Hopefully the other student has a different number to
me so had to do a different lab for part 1. But my part 2 code is close to
fully functional.

Basically this is what I have implemented so far:

* Requirement 1 - all
* Requirement 2 - all
* Requirement 3
    - Create and initialise the list, no other functionality yet
* Requirement 4
    - Loading in the file
    - Validating the file / line
    - Tokenising each line
    - Validating each token
    - Error messages for validations

Mainly all I have left to do is the linked list functions, saving to a file, and
printing the list.

Do I need to do anything about this potentially compromised code? Should I
submit what I have right now so you have it on record?"

Because my repos were still on public until July 31st, the student(s) who were
stealing my code could have been doing it up until that time. I have purposely
gone through and changed all the comments in the *.c files so they are different
to what I had committed to the open repo. I did this because I noticed the
student who stole my code last time didn't even bother to change my comments.

I messaged Paul about this comment changing on Canvas at 31 July 2019 at 17:21

I have also refactored my code extensively when I was trying to hunt down the
stack smash bug.
