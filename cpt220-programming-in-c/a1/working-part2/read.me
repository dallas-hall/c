Student Name    :   Dallas Hall
RMIT Student ID :   s3461243
COURSE CODE     :   CPT220 / OLA00
Program Code    :   Bachelor of Information Technology (OLA00 / BP162OUP15)

How to compile and execute the program
---------------------------------------

gcc -ansi -Wall -pedantic bar_list.c board.c game.c helpers.c io.c main.c
player.c rules.c -o backgammon.out

I created a file called compile-flags with the above inside of it, made it
executable and just ran ./compile-flags to generate the binary.out file.

Approaches taken to solving the set problems
---------------------------------------------

1) Previous Resources
I used my previous resources from the last part of the assignment. Namely
the diagram of the c and h files that I drew, the spreadsheet with the game
board, and text files.

2) Development Process
I followed the same develop process as last time, which is a) code in CLion
b) run and debug in CLion c) compile with gcc on my local Fedora machine d) push
to RMIT and compile with gcc there.

3) Research Steps
When trying to solve problems, I used the same steps as last time, which was:
a) Read through the course's code examples.
b) Read through the code examples from the C How To Program 6e text book.
c) I did some online research.
d) Asked my friend who is a very experienced C programmer.

4) Top Down Design
I also used top down design approach again, as described in the text book
C How To Program 6e. I used this when thinking through seemingly complex
problems, like initialising the game board state.

5) Searching The Filesystem
I used grep -inr 'search-term' * inside of my working directory when looking
for stuff. I also used the same functionality inside of CLion when working with
that.

6) Bug Hunting
Most of my bug hunting and fixing was done with the CLion debugger as well as
a heap of print statements.

7) The Unsolvable Input Problem
I haven't been able to solve the intermittent input issue I have when tokenising
player move inputs. I tried a few things but just couldn't figure it out. I
tried removing the \n from the end of the string before tokenising, after token-
ising, I tried using clear_buffer, none of it worked. Maybe I am just double
pressing enter sometimes?


Comments
--------
1) I spent about 50-60 hours for both assignments. I found it really
challenging to program in C as well as understand the assignment structure
and requirements. This made my progress much slower that I had expected, so I
ran out of time for the second assignment.

2) I ran out of time because of 2 things. Firstly, I made the decision not to
start until I got feedback from assignment 1. I just didn't want to go away and
do a lot of work and then have to rework it. Secondly, I got sick before the
Sunday before the feedback was released and I was in bed and off of work for
that entire week. Because of the rules stated in the assignment I felt it was
too late to ask for an extension. As I would have been asking for this on Friday
the 5th without any work on the assignment. I do have a medical certificate for
the entire week. That said, I started this assignment on Saturday the 6th at
around 8am and I stopped coding that night at about 10pm. On Sunday the 7th I
started at around 8am and I stopped coding before the submission time. I believe
with 1 more day I would finish this assignment :)

3) Overall I found both assignments very challenging but I did learn quite a lot
along the way. But I am really struggling with this unit's structure as it is
completely different to all the other RMIT units that I have done before. This
is my last subject in the degree and I have received a HD for every other
subject but one. The bit I am struggling with is having assessments due in rapid
succession whilst trying to go through the unit's content as well as the
textbook. I need the textbook as well as the unit's content because my learning
style is to deep dive the topic and the course's material doesn't provide me
that depth. Also, some of the recommended readings for C How To Program 6e
don't actually match up with the one's listed in Canvas. For example, Canvas
completely misses chapter 10, which is all about structs and enums. I found this
after the first part of the assignment .