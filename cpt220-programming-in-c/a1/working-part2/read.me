Student Name    :   Dallas Hall
RMIT Student ID :   s3461243
COURSE CODE     :   CPT220 / OLA00
Program Code    :   Bachelor of Information Technology (OLA00 / BP162OUP15)

How to compile and execute the program
---------------------------------------

gcc -ansi -Wall -pedantic bar_list.c board.c game.c helpers.c io.c main.c
player.c rules.c -o backgammon.out

I created a file called compile-flags with the above inside of it, made it
executable and just ran ./compile-flags to generate the binary.out file.

Approaches taken to solving the set problems
---------------------------------------------

1) Previous Resources
I used my previous resources from the last part of the assignment. Namely
the diagram of the c and h files that I drew, the spreadsheet with the game
board, and text files.

2) Development Process
I followed the same develop process as last time, which is a) code in CLion
b) run and debug in CLion c) compile with gcc on my local Fedora machine d) push
to RMIT and compile with gcc there.

3) Research Steps
When trying to solve problems, I used the same steps as last time, which was:
a) Read through the course's code examples.
b) Read through the code examples from the C How To Program 6e text book.
c) I did some online research.
d) Asked my friend who is a very experienced C programmer.

4) Top Down Design
I also used top down design approach again, as described in the text book
C How To Program 6e. I used this when thinking through seemingly complex
problems, like initialising the game board state.

5) Searching The Filesystem
I used grep -inr 'search-term' * inside of my working directory when looking
for stuff. I also used the same functionality inside of CLion when working with
that.

6) Bug Hunting
Most of my bug hunting and fixing was done with the CLion debugger as well as
a heap of print statements.

7) The Unsolvable Input Problem
I haven't been able to solve the intermittent input issue I have when tokenising
player move inputs. I tried a few things but just couldn't figure it out. I
tried removing the \n from the end of the string before tokenising, after token-
ising, I tried using clear_buffer, none of it worked. Maybe I am just double
pressing enter sometimes?